{

	////////////////////////////////////////////////////////////
	// UNIFORMS
	///////////////////////////////////////////////////////////

	// BOOL
	"uniform bool": {
		"prefix": "uniform bool",
		"body": [
			"uniform bool ${1:name} <",
			"\tui_type = \"${2|combo,radio|}\";",
			"\tui_label = \"$3\";",
			"\t${4:ui_category = \"$5\";}",
			"\t${6:ui_tooltip = \"$7\";}",
			"> = ${8|true,false|};$0"
		],
		"description": "boolean uniform"
	},

	// COMBO
	"uniform combo": {
		"prefix": "uniform combo",
		"body": [
			"uniform int ${1:name} <",
			"\tui_type = \"combo\";",
			"\t${2:ui_category = \"$3\";}",
			"\tui_label = \"$4\";",
			"\t${5:ui_tooltip = \"$6\";}",
			"\tui_items = \"$7\";",
			"> = ${8:0};$0"
		],
		"description": "integer uniform with combo control"
	},

	// INT
	"uniform int": {
		"prefix": "uniform int",
		"body": [
			"uniform int ${1:name} <",
			"\tui_type = \"${2|drag,slider,input|}\";",
			"\t${3:ui_category = \"$4\";}",
			"\tui_label = \"$5\";",
			"\t${6:ui_tooltip = \"$7\";}",
			"\tui_min = ${8:0}; ui_max = ${9:1};",
			"\tui_step = ${10:1};",
			"> = ${11:1};$0"
		],
		"description": "integer uniform with drag, slider or input control"
	},
	
	"uniform int2": {
		"prefix": "uniform int2",
		"body": [
			"uniform int2 ${1:name} <",
			"\tui_type = \"${2|drag,slider,input|}\";",
			"\t${3:ui_category = \"$4\";}",
			"\tui_label = \"$5\";",
			"\t${6:ui_tooltip = \"$7\";}",
			"\tui_min = ${8:0}; ui_max = ${9:1};",
			"\tui_step = ${10:1};",
			"> = int2(${11:0}, ${12:0});$0"
		],
		"description": "int2 uniform with drag, slider or input control"
	},
		
	"uniform int3": {
		"prefix": "uniform int3",
		"body": [
			"uniform int3 ${1:name} <",
			"\tui_type = \"${2|drag,slider,input|}\";",
			"\t${3:ui_category = \"$4\";}",
			"\tui_label = \"$5\";",
			"\t${6:ui_tooltip = \"$7\";}",
			"\tui_min = ${8:0}; ui_max = ${9:1};",
			"\tui_step = ${10:1};",
			"> = int3(${11:0}, ${12:0}, ${13:0});$0"
		],
		"description": "int3 uniform with drag, slider or input control"
	},
	
	"Uniform int4": {
		"prefix": "uniform int4",
		"body": [
			"uniform int4 ${1:name} <",
			"\tui_type = \"${2|drag,slider,input|}\";",
			"\t${3:ui_category = \"$4\";}",
			"\tui_label = \"$5\";",
			"\t${6:ui_tooltip = \"$7\";}",
			"\tui_min = ${8:0}; ui_max = ${9:1};",
			"\tui_step = ${10:1};",
			"> = int4(${11:0}, ${12:0}, ${13:0}, ${14:0});$0"
		],
		"description": "int4 uniform with drag, slider or input control"
	},

	// FLOAT
	"uniform float": {
		"prefix": "uniform float",
		"body": [
			"uniform float ${1:name} <",
			"\tui_type = \"${2|drag,slider,input|}\";",
			"\t${3:ui_category = \"$4\";}",
			"\tui_label = \"$5\";",
			"\t${6:ui_tooltip = \"$7\";}",
			"\tui_min = ${8:0.0}; ui_max = ${9:1.0};",
			"\tui_step = ${10:0.01};",
			"> = ${11:1.0};$0"
		],
		"description": "float uniform with drag, slider or input control"
	},

	"uniform float2": {
		"prefix": "uniform float2",
		"body": [
			"uniform float2 ${1:name} <",
			"\tui_type = \"${2|drag,slider,input|}\";",
			"\t${3:ui_category = \"$4\";}",
			"\tui_label = \"$5\";",
			"\t${6:ui_tooltip = \"$7\";}",
			"\tui_min = ${8:0.0}; ui_max = ${9:1.0};",
			"\tui_step = ${10:0.01};",
			"> = float2(${11:1.0}, ${12:1.0});$0"
		],
		"description": "float2 uniform with drag, slider or input control"
	},

	"uniform float3": {
		"prefix": "uniform float3",
		"body": [
			"uniform float3 ${1:name} <",
			"\tui_type = \"${2|drag,slider,input|}\";",
			"\t${3:ui_category = \"$4\";}",
			"\tui_label = \"$5\";",
			"\t${6:ui_tooltip = \"$7\";}",
			"\tui_min = ${8:0.0}; ui_max = ${9:1.0};",
			"\tui_step = ${10:0.01};",
			"> = float3(${11:1.0}, ${12:1.0}, ${13:1.0});$0"
		],
		"description": "float3 uniform with drag, slider or input control"
	},

	"Uniform float4": {
		"prefix": "uniform float4",
		"body": [
			"uniform float4 ${1:name} <",
			"\tui_type = \"${2|drag,slider,input|}\";",
			"\t${3:ui_category = \"$4\";}",
			"\tui_label = \"$5\";",
			"\t${6:ui_tooltip = \"$7\";}",
			"\tui_min = ${8:0.0}; ui_max = ${9:1.0};",
			"\tui_step = ${10:0.01};",
			"> = float4(${11:1.0}, ${12:1.0}, ${13:1.0}, ${14:1.0});$0"
		],
		"description": "float4 uniform with drag, slider or input control"
	},
	
	// COLOR
	"uniform float3 color": {
		"prefix": "uniform float3 color",
		"body": [
			"uniform float3 ${1:name} <",
			"\tui_type = \"color\";",
			"\t${2:ui_category = \"$3\";}",
			"\tui_label = \"$4\";",
			"\t${5:ui_tooltip = \"$6\";}",
			"> = float3(${7:1.0}, ${8:1.0}, ${9:1.0});$0"
		],
		"description": "float3 uniform with color control"
	},

	"uniform float4 color": {
		"prefix": "uniform float4 color",
		"body": [
			"uniform float4 ${1:name} <",
			"\tui_type = \"color\";",
			"\t${2:ui_category = \"$3\";}",
			"\tui_label = \"$4\";",
			"\t${5:ui_tooltip = \"$6\";}",
			"> = float4(${7:1.0}, ${8:1.0}, ${9:1.0}, ${10:1.0});$0"
		],
		"description": "float4 uniform with color control"
	},
	
	// MISC
	"uniform float frametime": {
		"prefix": "uniform float frametime",
		"body": [
			"uniform float frametime < source = \"frametime\"; >;"
		],
		"description": "Time in milliseconds it took for the last frame to complete."
	},

	"uniform int framecount": {
		"prefix": "uniform int framecount",
		"body": [
			"uniform int framecount < source = \"framecount\"; >;"
		],
		"description": "Total amount of frames since the game started."
	},

	"uniform float4 date": {
		"prefix": "uniform float4 date",
		"body": [
			"uniform float4 date < source = \"date\"; >;"			
		],
		"description": "float4(year, month (1 - 12), day of month (1 - 31), time in seconds)"
	},

	"uniform float timer": {
		"prefix": "uniform float timer",
		"body": [
			"uniform float timer < source = \"timer\"; >;"			
		],
		"description": "Timer counting time in milliseconds since game start."
	},

	"uniform float2 pingpong": {
		"prefix": "uniform float2 pingpong",
		"body": [
			"uniform float2 pingpong < source = \"pingpong\"; min = ${1:0}; max = ${2:9}; step = ${3:1}; >;"			
		],
		"description": "Counter that counts up and down between min and max using step as increase value. The second component is either +1 or -1 depending on the direction it currently goes."
	},
	
	"uniform int random": {
		"prefix": "uniform int random",
		"body": [
			"uniform int random < source = \"random\"; min = ${1:0}; max = ${2:10}; >;"			
		],
		"description": "Gets a new random value between min and max every pass."
	},
	
	"uniform bool keydown": {
		"prefix": "uniform bool keydown",
		"body": [
			"uniform bool keydown < source = \"key\"; keycode = ${1:0x20}; mode = \"${2|press,toggle|}\"; >;"			
		],
		"description": "True if specified keycode (in this case the spacebar) is pressed and false otherwise. If mode is set to \"press\" the value is true only in the frame the key was initially held down. If mode is set to \"toggle\" the value stays true until the key is pressed a second time."
	},
	
	"uniform bool buttondown": {
		"prefix": "uniform bool buttondown",
		"body": [
			"uniform bool buttondown < source = \"mousebutton\"; keycode = ${1|0,1,2,3,4|}; mode = \"${2|press,toggle|}\"; >;"			
		],
		"description": "True if specified mouse button (0 - 4) is pressed and false otherwise. If mode is set to \"press\" the value is true only in the frame the key was initially held down. If mode is set to \"toggle\" the value stays true until the key is pressed a second time."
	},
	
	"uniform float2 mousepoint": {
		"prefix": "uniform float2 mousepoint",
		"body": [
			"uniform float2 mousepoint < source = \"mousepoint\"; >;"			
		],
		"description": "Gets the position of the mouse cursor in screen coordinates."
	},
	
	"uniform float2 mousedelta": {
		"prefix": "uniform float2 mousedelta",
		"body": [
			"uniform float2 mousedelta < source = \"mousedelta\"; >;"			
		],
		"description": "Gets the movement of the mouse cursor in screen coordinates."
	},



	////////////////////////////////////////////////////////////
	// TEXTURES + SAMPLERS
	///////////////////////////////////////////////////////////

	"texture2D": {
		"prefix": "texture2D",
		"body": [
			"texture2D ${1:name} ${2:< source = $3; >} { Width = ${4:BUFFER_WIDTH}; Height = ${5:BUFFER_HEIGHT}; MipLevels = ${6:1}; Format = ${7|RGBA8,R8,R16F,R32F,RG8,RG16,RG16F,RG32F,RGBA16,RGBA16F,RGBA32F|}; };$0"
		],
		"description": "texture2D"
	},

	"sampler2D": {
		"prefix": "sampler2D",
		"body": [
			"sampler2D ${1:name} { Texture = $2; MipLODBias = ${3:0}; };$0"
		],
		"description": "sampler2D"
	},

	"texture2D+sampler2D": {
		"prefix": "texture2D+sampler2D",
		"body": [
			"texture2D ${1:name} ${2:< source = $3; >} { Width = ${4:BUFFER_WIDTH}; Height = ${5:BUFFER_HEIGHT}; MipLevels = ${6:1}; Format = ${7|RGBA8,R8,R16F,R32F,RG8,RG16,RG16F,RG32F,RGBA16,RGBA16F,RGBA32F|}; };",
			"sampler2D ${8:name} { Texture = $1; MipLODBias = ${9:0}; };$0"
		],
		"description": "texture2D and sampler2D"
	},

	////////////////////////////////////////////////////////////
	// PIXEL SHADER
	///////////////////////////////////////////////////////////

	"pixel-shader-float3": {
		"prefix": "pixel-shader-float3",
		"body": [
			"float3 ${1:name}(float4 vpos : SV_Position, float2 texcoord : TexCoord) : SV_Target {",
			"\t$0",
			"}"
		],
		"description": "pixel shader"
	},

	"pixel-shader-void-1-target": {
		"prefix": "pixel-shader-void-1-target",
		"body": [
			"void ${1:name}(float4 vpos : SV_Position, float2 texcoord : TexCoord, out ${2:float3} ${3:name} : SV_Target0) {",
			"\t$0",
			"}"
		],
		"description": "pixel shader; 1 target"
	},

	"pixel-shader-void-2-targets": {
		"prefix": "pixel-shader-void-2-targets",
		"body": [
			"void ${1:name}(float4 vpos : SV_Position, float2 texcoord : TexCoord, out ${2:float3} ${3:name} : SV_Target0, out ${4:float3} ${5:name} : SV_Target1) {",
			"\t$0",
			"}"
		],
		"description": "pixel shader; 2 targets"
	},

	"pixel-shader-void-3-targets": {
		"prefix": "pixel-shader-void-3-targets",
		"body": [
			"void ${1:name}(float4 vpos : SV_Position, float2 texcoord : TexCoord, out ${2:float3} ${3:name} : SV_Target0, out ${4:float3} ${5:name} : SV_Target1, out ${6:float3} ${7:name} : SV_Target2) {",
			"\t$0",
			"}"
		],
		"description": "pixel shader; 3 targets"
	},

	////////////////////////////////////////////////////////////
	// TECHNIQUES + PASSES + RENDER TARGETS
	///////////////////////////////////////////////////////////

	"technique": {
		"prefix": "technique",
		"body": [
			"technique ${1:name} {",
			"\t$0",
			"}"
		],
		"description": "technique"
	},

	"pass": {
		"prefix": "pass",
		"body": [
			"pass {",
			"\tVertexShader = PostProcessVS;",
			"\tPixelShader = $1;",
			"\t${2:/* RenderTarget = BackBuffer */}",
			"}$0"
		],
		"description": "pass"
	},
	
	"RenderTarget": {
		"prefix": "RenderTarget",
		"body": [
			"RenderTarget$1 = $2;"
		],
		"description": "RenderTarget"
	},

	////////////////////////////////////////////////////////////
	// CONTROL FLOW
	///////////////////////////////////////////////////////////

	"for": {
		"prefix": "for",
		"body": [
			"for(${1:int} $2 = $3; $2 ${4:<} $5; $2${6:++}) {",
			"\t$0",
			"}"
		],
		"description": "for-loop"
	},
	
	"for-xy": {
		"prefix": "for-xy",
		"body": [
			"for(${1:int} $2 = $3; $2 ${4:<} $5; $2${6:++}) {",
			"\tfor(${1:int} $7 = $8; $7 ${9:<} $10; $7${11:++}) {",
			"\t\t$0",
			"\t}",
			"}"
		],
		"description": "nested for-loops"
	},

	////////////////////////////////////////////////////////////
	// RESHADE INTRINSICS
	///////////////////////////////////////////////////////////

	"tex2D": {
		"prefix": "tex2D",
		"body": "tex2D(${1:sampler2D s}, ${2:float2 coords})${3:.rgb};$0",
		"description": "Samples a 2D texture. <float4>"
	},
	
	"tex2Dlod": {
		"prefix": "tex2Dlod",
		"body": "tex2Dlod(${1:sampler2D s}, float4(${2:float2 coords}, 0, ${3:LOD}))${4:.rgb};$0",
		"description": "Samples a 2D texture with mipmaps. <float4>"
	},
	
	"tex2Doffset": {
		"prefix": "tex2Doffset",
		"body": "tex2Doffset(${1:sampler2D s}, ${2:float2 coords}, ${3:int2 offset})${4:.rgb};$0",
		"description": "Offsets the texture coordinates before sampling. <float4>"
	},

	"tex2Dlodoffset": {
		"prefix": "tex2Dlodoffset",
		"body": "tex2Dlodoffset(${1:sampler2D s}, float4(${2:float2 coords}, 0, ${3:LOD}), ${4:int2 offset})${5:.rgb};$0",
		"description": "Samples a 2D texture with mipmaps. Offsets the texture coordinates before sampling. <float4>"
	},

	"tex2Dfetch": {
		"prefix": "tex2Dfetch",
		"body": "tex2Dfetch(${1:sampler2D s}, int4(${2:int2 pos}, 0, ${3:int miplevel}))${4:.rgb};$0",
		"description": "Fetches a value from the texture directly without any sampling. <float4>"
	},

	"tex2Dgather": {
		"prefix": "tex2Dgather",
		"body": "tex2Dgather(${1:sampler2D s}, ${2:float2 coords}, ${3:int comp})${4:.rgb};$0",
		"description": "Gathers the specified component of the four neighboring pixels and returns the result. <float4>"
	},

	"tex2Dgatheroffset": {
		"prefix": "tex2Dgatheroffset",
		"body": "tex2Dgatheroffset(${1:sampler2D s}, ${2:float2 coords}, ${3:int2 offset}, ${4:<nt comp})${5:.rgb};$0",
		"description": "Gathers the specified component of the four neighboring pixels and returns the result. Offsets the texture coordinates before sampling. <float4>"
	},

	"tex2Dsize": {
		"prefix": "tex2Dsize",
		"body": "tex2Dsize(${1:sampler2D s}, ${2:int lod});$0",
		"description": "Returns the size of a texture. <int2>"
	},

	"ReShade::BackBuffer": {
		"prefix": "ReShade::BackBuffer",
		"body": "ReShade::BackBuffer$0",
		"description": "ReShade::BackBuffer"
	},

	"ReShade::PixelSize": {
		"prefix": "ReShade::PixelSize",
		"body": "ReShade::PixelSize$0",
		"description": "ReShade::PixelSize"
	}
}